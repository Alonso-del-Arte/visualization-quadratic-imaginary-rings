/*
 * Copyright (C) 2018 Alonso del Arte
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package imaginaryquadraticinteger;

import java.util.List;
import java.util.ArrayList;
import java.util.Random;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test of the main class, which defines objects that represent imaginary 
 * quadratic integers.
 * @author Alonso del Arte, from template generated by NetBeans IDE
 */
public class ImaginaryQuadraticIntegerTest {
    
    private static ImaginaryQuadraticRing ringGaussian;
    private static ImaginaryQuadraticRing ringZi2;
    private static ImaginaryQuadraticRing ringEisenstein;
    private static ImaginaryQuadraticRing ringOQi7;
    private static ImaginaryQuadraticRing ringRandom;
    private static ImaginaryQuadraticRing ringRandomForAltTesting;
    
    private static List<ImaginaryQuadraticInteger> testIntegers, testAdditiveInverses, testConjugates, testNorms;
    private static List<Integer> testNormsRealParts;
    
    /**
     * The value of 0 as an ImaginaryQuadraticInteger.
     */
    private static ImaginaryQuadraticInteger zeroIQI;
    
    private static int randomDiscr, randomRealPart, randomImagPart, randomRealForHalfInts, randomImagForHalfInts, totalTestIntegers;
    private static boolean ringRandomd1mod4;
    
    public ImaginaryQuadraticIntegerTest() {
    }
    
    /**
     * Sets up the static variables that will be used for the tests. Some of the 
     * values are pseudorandom numbers within given bounds.
     */
    @BeforeClass
    public static void setUpClass() {
        int testMinD, maxAB;
        randomDiscr = NumberTheoreticFunctionsCalculator.randomNegativeSquarefreeNumber(RingWindowDisplay.MINIMUM_RING_D);
        if (randomDiscr > -5) {
            randomDiscr = -5; // This is just in case we get -3 or -1, which we are already testing for and which require special treatment in some of the tests.
        }
        ringRandomd1mod4 = (randomDiscr % 4 == -3);
        ringGaussian = new ImaginaryQuadraticRing(-1);
        ringZi2 = new ImaginaryQuadraticRing(-2);
        ringEisenstein = new ImaginaryQuadraticRing(-3);
        ringOQi7 = new ImaginaryQuadraticRing(-7);
        ringRandom = new ImaginaryQuadraticRing(randomDiscr);
        if (ringRandom.hasHalfIntegers()) {
            ringRandomForAltTesting = ringRandom;
        } else {
            int nextD = ringRandom.getNegRad();
            do {
                nextD++;
            } while (!(NumberTheoreticFunctionsCalculator.isSquareFree(nextD) && (nextD % 4 == -3)));
            ringRandomForAltTesting = new ImaginaryQuadraticRing(nextD);
            System.out.println(ringRandomForAltTesting.toASCIIString() + " has been chosen for testing toStringAlt() and toASCIIStringAlt.");
        }
        System.out.println(ringRandom.toASCIIString() + " has been randomly chosen for testing purposes.");
        maxAB = (int) Math.floor(Math.sqrt(Integer.MAX_VALUE/((-4) * (randomDiscr + 1))));
        System.out.println("Maximum for real and imaginary parts is " + maxAB);
        Random ranNumGen = new Random();
        randomRealPart = ranNumGen.nextInt(2 * maxAB) - maxAB;
        randomImagPart = ranNumGen.nextInt(2 * maxAB) - maxAB;
        if (randomImagPart == 0) {
            randomImagPart = 1; // We want to make sure none of these random imaginary quadratic integers are purely real.
        }
        randomRealForHalfInts = 2 * randomRealPart + 1;
        randomImagForHalfInts = 2 * randomImagPart + 1;
        zeroIQI = new ImaginaryQuadraticInteger(0, 0, ringGaussian, 1);
        testIntegers = new ArrayList<>();
        testAdditiveInverses = new ArrayList<>();
        testConjugates = new ArrayList<>();
        testNorms = new ArrayList<>();
        testNormsRealParts = new ArrayList<>();
        int currNorm;
        ImaginaryQuadraticInteger currIQI = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, ringGaussian, 1);
        testIntegers.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(-randomRealPart, -randomImagPart, ringGaussian, 1);
        testAdditiveInverses.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealPart, -randomImagPart, ringGaussian, 1);
        testConjugates.add(currIQI);
        currNorm = randomRealPart * randomRealPart + randomImagPart * randomImagPart;
        currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringGaussian, 1);
        testNorms.add(currIQI);
        testNormsRealParts.add(currNorm);
        currIQI = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, ringZi2, 1);
        testIntegers.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(-randomRealPart, -randomImagPart, ringZi2, 1);
        testAdditiveInverses.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealPart, -randomImagPart, ringZi2, 1);
        testConjugates.add(currIQI);
        currNorm = randomRealPart * randomRealPart + 2 * randomImagPart * randomImagPart;
        currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringZi2, 1);
        testNorms.add(currIQI);
        testNormsRealParts.add(currNorm);
        currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, ringEisenstein, 2);
        testIntegers.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(-randomRealForHalfInts, -randomImagForHalfInts, ringEisenstein, 2);
        testAdditiveInverses.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, -randomImagForHalfInts, ringEisenstein, 2);
        testConjugates.add(currIQI);
        currNorm = (randomRealForHalfInts * randomRealForHalfInts + 3 * randomImagForHalfInts * randomImagForHalfInts)/4;
        currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringEisenstein, 1);
        testNorms.add(currIQI);
        testNormsRealParts.add(currNorm);
        currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, ringOQi7, 2);
        testIntegers.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(-randomRealForHalfInts, -randomImagForHalfInts, ringOQi7, 2);
        testAdditiveInverses.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, -randomImagForHalfInts, ringOQi7, 2);
        testConjugates.add(currIQI);
        currNorm = (randomRealForHalfInts * randomRealForHalfInts + 7 * randomImagForHalfInts * randomImagForHalfInts)/4;
        currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringOQi7, 1);
        testNorms.add(currIQI);
        testNormsRealParts.add(currNorm);
        if (ringRandomd1mod4) {
            currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, ringRandom, 2);
            testIntegers.add(currIQI);
            currIQI = new ImaginaryQuadraticInteger(-randomRealForHalfInts, -randomImagForHalfInts, ringRandom, 2);
            testAdditiveInverses.add(currIQI);
            currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, -randomImagForHalfInts, ringRandom, 2);
            testConjugates.add(currIQI);
            currNorm = (randomRealForHalfInts * randomRealForHalfInts + (-randomDiscr) * randomImagForHalfInts * randomImagForHalfInts)/4;
            currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringRandom, 1);
            testNorms.add(currIQI);
            testNormsRealParts.add(currNorm);
        } else {
            currIQI = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, ringRandom, 1);
            testIntegers.add(currIQI);
            currIQI = new ImaginaryQuadraticInteger(-randomRealPart, -randomImagPart, ringRandom, 1);
            testAdditiveInverses.add(currIQI);
            currIQI = new ImaginaryQuadraticInteger(randomRealPart, -randomImagPart, ringRandom, 1);
            testConjugates.add(currIQI);
            currNorm = randomRealPart * randomRealPart + (-randomDiscr) * randomImagPart * randomImagPart;
            currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringRandom, 1);
            testNorms.add(currIQI);
            testNormsRealParts.add(currNorm);
        }
        totalTestIntegers = testIntegers.size();
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of algebraicDegree method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testAlgebraicDegree() {
        System.out.println("algebraicDegree");
        int expResult = 2; // Quadratic integers with nonzero imaginary part should have algebraic degree 2
        int result;
        for (int i = 0; i < totalTestIntegers; i++) {
            result = testIntegers.get(i).algebraicDegree();
            assertEquals(expResult, result);
            result = testAdditiveInverses.get(i).algebraicDegree();
            assertEquals(expResult, result);
            result = testConjugates.get(i).algebraicDegree();
            assertEquals(expResult, result);
        }
        expResult = 1; // Purely real nonzero integers should have algebraic degree 1
        for (int j = 0; j < testNorms.size(); j++) {
            result = testNorms.get(j).algebraicDegree();
            assertEquals(expResult, result);
        }
        expResult = 0; // And last but not least, 0 should have algebraic degree 0
        result = zeroIQI.algebraicDegree();
        assertEquals(expResult, result);
    }

    /**
     * Test of trace method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testTrace() {
        System.out.println("trace");
        int expResult = 2 * randomRealPart;
        int result;
        for (int i = 0; i < totalTestIntegers; i++) {
            result = testIntegers.get(i).trace();
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                assertEquals(randomRealForHalfInts, result);
            } else {
                assertEquals(expResult, result);
            }
        }
    }
    
    /**
     * Test of norm method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testNorm() {
        System.out.println("norm");
        int expResult, result;
        for (int i = 0; i < totalTestIntegers; i++) {
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                expResult = (randomRealForHalfInts * randomRealForHalfInts + testIntegers.get(i).imagQuadRing.getAbsNegRad() * randomImagForHalfInts * randomImagForHalfInts)/4;
            } else {
                expResult = randomRealPart * randomRealPart + testIntegers.get(i).imagQuadRing.getAbsNegRad() * randomImagPart * randomImagPart;
            }
            result = testIntegers.get(i).norm();
            assertEquals(expResult, result);
        }
    }

    /**
     * Test of minPolynomial method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testMinPolynomial() {
        System.out.println("minPolynomial");
        int[] expResult = {0, 0, 1};
        int[] result;
        ImaginaryQuadraticInteger baseImagDist, purelyRealInt;
        for (int i = 0; i < totalTestIntegers; i++) {
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                expResult[1] = -randomRealForHalfInts;
                expResult[0] = (randomRealForHalfInts * randomRealForHalfInts + randomImagForHalfInts * randomImagForHalfInts * testIntegers.get(i).imagQuadRing.getAbsNegRad())/4;
            } else {
                expResult[1] = (-2) * randomRealPart;
                expResult[0] = randomRealPart * randomRealPart + randomImagPart * randomImagPart * testIntegers.get(i).imagQuadRing.getAbsNegRad();
            }
            result = testIntegers.get(i).minPolynomial();
            assertArrayEquals(expResult, result);
            /* Now to test the mimimal polymomial of the purely imaginary 
               integer sqrt(d) */
            expResult[1] = 0;
            expResult[0] = testIntegers.get(i).imagQuadRing.getAbsNegRad();
            baseImagDist = new ImaginaryQuadraticInteger(0, 1, testIntegers.get(i).imagQuadRing, 1);
            result = baseImagDist.minPolynomial();
            assertArrayEquals(expResult, result);
        }
        // Next, some purely real integers
        expResult[2] = 0;
        expResult[1] = 1;
        for (int i = 1; i < 10; i++) {
            expResult[0] = -i;
            purelyRealInt = new ImaginaryQuadraticInteger(i, 0, ringRandom, 1);
            result = purelyRealInt.minPolynomial();
            assertArrayEquals(expResult, result);
        }
        // And last but not least, 0
        expResult[0] = 0;
        result = zeroIQI.minPolynomial();
        assertArrayEquals(expResult, result);
    }

    /**
     * Test of minPolynomialString method, of class ImaginaryQuadraticInteger.
     * For methods that return Strings, spaces are desirable but not required.
     * Therefore the tests should strip out spaces before asserting equality. It
     * is understood that "0x" is implied in the minimal polynomial of purely 
     * imaginary integers and therefore "+0x" and "-0x" should both be excluded 
     * from the output.
     */
    @Test
    public void testMinPolynomialString() {
        System.out.println("minPolynomialString");
        String expResult, result;
        for (int i = 0; i < totalTestIntegers; i++) {
            expResult = "x^2";
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                if (randomRealForHalfInts < 0) {
                    expResult = expResult + "+" + ((-1) * randomRealForHalfInts);
                } else {
                    expResult = expResult + "-" + randomRealForHalfInts;
                }
                expResult = expResult + "x+" + ((randomRealForHalfInts * randomRealForHalfInts + randomImagForHalfInts * randomImagForHalfInts * testIntegers.get(i).imagQuadRing.getAbsNegRad())/4);
            } else {
                if (randomRealPart < 0) {
                    expResult = expResult + "+" + ((-2) * randomRealPart);
                } else {
                    expResult = expResult + "-" + (2 * randomRealPart);
                }
                expResult = expResult + "x+" + (randomRealPart * randomRealPart + randomImagPart * randomImagPart * testIntegers.get(i).imagQuadRing.getAbsNegRad());
            }
            expResult = expResult.replace("+1x", "+x");
            expResult = expResult.replace("-1x", "-x");
            expResult = expResult.replace("+0x", "");
            expResult = expResult.replace("-0x", "");
            result = testIntegers.get(i).minPolynomialString().replace(" ", ""); // Strip out spaces
            assertEquals(expResult, result);
        }
        // Now to test the polynomial strings of a few purely real integers
        ImaginaryQuadraticInteger degreeOneInt;
        for (int j = 1; j < 8; j++) {
            degreeOneInt = new ImaginaryQuadraticInteger(j, 0, ringRandom, 1);
            expResult = "x-" + j;
            result = degreeOneInt.minPolynomialString().replace(" ", "");
            assertEquals(expResult, result);
            degreeOneInt = new ImaginaryQuadraticInteger(-j, 0, ringRandom, 1);
            expResult = "x+" + j;
            result = degreeOneInt.minPolynomialString().replace(" ", "");
            assertEquals(expResult, result);
        }
        /* I'm not terribly concerned about this one, so it's here more for the 
           sake of completeness than anything else. Feel free to delete if 
           inconvenient. */
        assertEquals("x", zeroIQI.minPolynomialString());
    }
    
    /**
     * Test of conjugate method, of class ImaginaryQuadraticInteger. These are 
     * the two main facts used to make sure conjugate() gives the right results: 
     * first, the norm of a quadratic integer divided by that quadratic integer 
     * is its conjugate; and second, the conjugate of a conjugate is the 
     * original quadratic integer.
     */
    @Test
    public void testConjugate() {
        System.out.println("conjugate");
        ImaginaryQuadraticInteger expResult, result;
        for (int i = 0; i < totalTestIntegers; i++) {
            try {
                expResult = testNorms.get(i).divides(testIntegers.get(i));
            } catch (AlgebraicDegreeOverflowException adoe) {
                expResult = zeroIQI; // This is to avoid "expResult might not have been initialized" error
                fail("AlgebraicDegreeOverflowException should not have occurred during test of conjugate().\n" + adoe.getMessage() + "\nThere may be a mistake in the setup of the test.");
            } catch (NotDivisibleException nde) {
                expResult = zeroIQI;
                fail("NotDivisibleException should not have occurred during test of conjugate().\n" + nde.getMessage() + "\nThere may be a mistake in the setup of the test.");
            }
            result = testIntegers.get(i).conjugate();
            assertEquals(expResult, result);
            assertEquals(testConjugates.get(i), result);
            result = result.conjugate();
            assertEquals(result, testIntegers.get(i));
        }
    }

    /**
     * Test of getRealPartMult method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testGetRealPartMult() {
        System.out.println("getRealPartMult");
        double expResult = (double) randomRealForHalfInts/2;
        double result;
        for (int i = 0; i < totalTestIntegers; i++) {
            result = testIntegers.get(i).getRealPartMult();
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                assertEquals(expResult, result, ImaginaryQuadraticRingTest.TEST_DELTA);
            } else {
                assertEquals(randomRealPart, result, ImaginaryQuadraticRingTest.TEST_DELTA);
            }
        }
    }

    /**
     * Test of getImagPartwRadMult method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testGetImagPartwRadMult() {
        System.out.println("getImagPartwRadMult");
        double expResult, result;
        for (int i = 0; i < totalTestIntegers; i++) {
            result = testIntegers.get(i).getImagPartwRadMult();
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                expResult = ((double) randomImagForHalfInts * testIntegers.get(i).imagQuadRing.getAbsNegRadSqrt())/2;
            } else {
                expResult = (double) randomImagPart * testIntegers.get(i).imagQuadRing.getAbsNegRadSqrt();
            }
            assertEquals(expResult, result, ImaginaryQuadraticRingTest.TEST_DELTA);
        }
    }

    /**
     * Test of getTwiceRealPartMult method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testGetTwiceRealPartMult() {
        System.out.println("getTwiceRealPartMult");
        long expResult, result;
        for (int i = 0; i < totalTestIntegers; i++) {
            result = testIntegers.get(i).getTwiceRealPartMult();
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                expResult = randomRealForHalfInts;
            } else {
                expResult = 2 * randomRealPart;
            }
            assertEquals(expResult, result);
        }
    }

    /**
     * Test of getTwiceImagPartMult method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testGetTwiceImagPartMult() {
        System.out.println("getTwiceImagPartMult");
        long expResult, result;
        for (int i = 0; i < totalTestIntegers; i++) {
            result = testIntegers.get(i).getTwiceImagPartMult();
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                expResult = randomImagForHalfInts;
            } else {
                expResult = 2 * randomImagPart;
            }
            assertEquals(expResult, result);
        }
    }
    
    /**
     * Test of toString method, of class ImaginaryQuadraticInteger. For methods 
     * that return Strings, spaces are desirable but not required. Therefore the 
     * tests should strip out spaces before asserting equality.
     */
    @Test
    public void testToString() {
        System.out.println("toString");
        String expResult;
        if (randomRealPart == 0) {
            expResult = randomImagPart + "i";
        } else {
            expResult = randomRealPart + "+" + randomImagPart + "i";
        }
        expResult = expResult.replace("+-", "-");
        expResult = expResult.replace("+1i", "+i");
        expResult = expResult.replace("-1i", "-i");
        String result = testIntegers.get(0).toString().replace(" ", "");
        assertEquals(expResult, result);
        for (int i = 1; i < totalTestIntegers; i++) {
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                expResult = randomRealForHalfInts + "/2+" + randomImagForHalfInts + "\u221A(" + testIntegers.get(i).imagQuadRing.getNegRad() + ")/2";
            } else {
                if (randomRealPart == 0) {
                    expResult = randomImagPart + "\u221A(" + testIntegers.get(i).imagQuadRing.getNegRad() + ")";
                } else {
                    expResult = randomRealPart + "+" + randomImagPart + "\u221A(" + testIntegers.get(i).imagQuadRing.getNegRad() + ")";
                }
            }
            expResult = expResult.replace("+-", "-");
            expResult = expResult.replace("+1\u221A", "+\u221A");
            expResult = expResult.replace("-1\u221A", "-\u221A");
            result = testIntegers.get(i).toString().replace(" ", "");
            assertEquals(expResult, result);
        }
    }

    /**
     * Test of toStringAlt method, of class ImaginaryQuadraticInteger. For 
     * methods that return Strings, spaces are desirable but not required.
     * Therefore the tests should strip out spaces before asserting equality. If
     * the test of the toString method fails, the result of this test is 
     * irrelevant.
     */
    @Test
    public void testToStringAlt() {
        System.out.println("toStringAlt");
        String expResult, result;
        ImaginaryQuadraticInteger currIQI;
        int nonThetaPart;
        // Treating the ring of Eisenstein integers as a special case
        for (int a = -32; a < 32; a++) {
            for (int b = -9; b < 9; b++) {
                if ((a % 2) == (b % 2)) {
                    nonThetaPart = (a + b)/2;
                    if (nonThetaPart == 0) {
                        expResult = b + "\u03C9";
                    } else {
                        expResult = nonThetaPart + "+" + b + "\u03C9";
                    }
                    expResult = expResult.replace("+-", "-");
                    expResult = expResult.replace("+1\u03C9", "+\u03C9");
                    expResult = expResult.replace("-1\u03C9", "-\u03C9");
                    if (expResult.equals("0\u03C9")) {
                        expResult = "0";
                    }
                    if (expResult.equals("1\u03C9")) {
                        expResult = "\u03C9";
                    }
                    expResult = expResult.replace("+0\u03C9", "");
                    // expResult = expResult.replace("-0\u03C9", ""); This one's unnecessary, right?
                    currIQI = new ImaginaryQuadraticInteger(a, b, ringEisenstein, 2);
                    result = currIQI.toStringAlt().replace(" ", "");
                    assertEquals(expResult, result);
                }
            }
        }
        /* Now to test in O_Q(sqrt(-7)) and some random ring with 
           "half-integers" */
        for (int m = -32; m < 32; m++) {
            for (int n = -9; n < 9; n++) {
                if ((m % 2) == (n % 2)) {
                    nonThetaPart = (m - n)/2;
                    if (nonThetaPart == 0) {
                        expResult = n + "\u03B8";
                    } else {
                        expResult = nonThetaPart + "+" + n + "\u03B8";
                    }
                    expResult = expResult.replace("+-", "-");
                    expResult = expResult.replace("+1\u03B8", "+\u03B8");
                    expResult = expResult.replace("-1\u03B8", "-\u03B8");
                    if (expResult.equals("0\u03B8")) {
                        expResult = "0";
                    }
                    if (expResult.equals("1\u03B8")) {
                        expResult = "\u03B8";
                    }
                    expResult = expResult.replace("+0\u03B8", "");
                    // expResult = expResult.replace("-0\u03C9", ""); This one's unnecessary, right?
                    currIQI = new ImaginaryQuadraticInteger(m, n, ringOQi7, 2);
                    result = currIQI.toStringAlt().replace(" ", "");
                    assertEquals(expResult, result);
                    // No need to change expResult to test in ringRandomForAltTesting
                    currIQI = new ImaginaryQuadraticInteger(m, n, ringRandomForAltTesting, 2);
                    result = currIQI.toStringAlt().replace(" ", "");
                    assertEquals(expResult, result);
                }
            }
        }
        // For integers in rings without "half-integers," we expect toString() and toStringAlt() to give the same result.
        for (int i = 0; i < totalTestIntegers; i++) {
            if (!testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                assertEquals(testIntegers.get(i).toString(), testIntegers.get(i).toStringAlt());
            }
        }
    }

    /**
     * Test of toASCIIString method, of class ImaginaryQuadraticInteger. For 
     * methods that return Strings, spaces are desirable but not required.
     * Therefore the tests should strip out spaces before asserting equality.
     */
    @Test
    public void testToASCIIString() {
        System.out.println("toASCIIString");
        String expResult;
        if (randomRealPart == 0) {
            expResult = randomImagPart + "i";
        } else {
            expResult = randomRealPart + "+" + randomImagPart + "i";
        }
        expResult = expResult.replace("+-", "-");
        expResult = expResult.replace("+1i", "+i");
        expResult = expResult.replace("-1i", "-i");
        String result = testIntegers.get(0).toASCIIString().replace(" ", "");
        assertEquals(expResult, result);
        for (int i = 1; i < totalTestIntegers; i++) {
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                expResult = randomRealForHalfInts + "/2+" + randomImagForHalfInts + "sqrt(" + testIntegers.get(i).imagQuadRing.getNegRad() + ")/2";
            } else {
                if (randomRealPart == 0) {
                    expResult = randomImagPart + "sqrt(" + testIntegers.get(i).imagQuadRing.getNegRad() + ")";
                } else {
                    expResult = randomRealPart + "+" + randomImagPart + "sqrt(" + testIntegers.get(i).imagQuadRing.getNegRad() + ")";
                }
            }
            expResult = expResult.replace("+-", "-");
            expResult = expResult.replace("+1sqrt", "+sqrt");
            expResult = expResult.replace("-1sqrt", "-sqrt");
            result = testIntegers.get(i).toASCIIString().replace(" ", "");
            assertEquals(expResult, result);
        }
    }

    /**
     * Test of toASCIIStringAlt method, of class ImaginaryQuadraticInteger. For 
     * methods that return Strings, spaces are desirable but not required.
     * Therefore the tests should strip out spaces before asserting equality.
     * If the test of the toASCIIString method fails, the result of this test is 
     * irrelevant.
     */
    @Test
    public void testToASCIIStringAlt() {
        System.out.println("toASCIIStringAlt");
        String expResult, result;
        ImaginaryQuadraticInteger currIQI;
        int nonThetaPart;
        // Treating the ring of Eisenstein integers as a special case
        for (int a = -32; a < 32; a++) {
            for (int b = -9; b < 9; b++) {
                if ((a % 2) == (b % 2)) {
                    nonThetaPart = (a + b)/2;
                    if (nonThetaPart == 0) {
                        expResult = b + "omega";
                    } else {
                        expResult = nonThetaPart + "+" + b + "omega";
                    }
                    expResult = expResult.replace("+-", "-");
                    expResult = expResult.replace("+1omega", "+omega");
                    expResult = expResult.replace("-1omega", "-omega");
                    if (expResult.equals("0omega")) {
                        expResult = "0";
                    }
                    if (expResult.equals("1omega")) {
                        expResult = "omega";
                    }
                    expResult = expResult.replace("+0omega", "");
                    // expResult = expResult.replace("-0omega", ""); This one's unnecessary, right?
                    currIQI = new ImaginaryQuadraticInteger(a, b, ringEisenstein, 2);
                    result = currIQI.toASCIIStringAlt().replace(" ", "");
                    assertEquals(expResult, result);
                }
            }
        }
        /* Now to test in O_Q(sqrt(-7)) and some random ring with 
        "half-integers" */
        for (int m = -32; m < 32; m++) {
            for (int n = -9; n < 9; n++) {
                if ((m % 2) == (n % 2)) {
                    nonThetaPart = (m - n)/2;
                    if (nonThetaPart == 0) {
                        expResult = n + "theta";
                    } else {
                        expResult = nonThetaPart + "+" + n + "theta";
                    }
                    expResult = expResult.replace("+-", "-");
                    expResult = expResult.replace("+1theta", "+theta");
                    expResult = expResult.replace("-1theta", "-theta");
                    if (expResult.equals("0theta")) {
                        expResult = "0";
                    }
                    if (expResult.equals("1theta")) {
                        expResult = "theta";
                    }
                    expResult = expResult.replace("+0theta", "");
                    // expResult = expResult.replace("-0omega", ""); This one's unnecessary, right?
                    currIQI = new ImaginaryQuadraticInteger(m, n, ringOQi7, 2);
                    result = currIQI.toASCIIStringAlt().replace(" ", "");
                    assertEquals(expResult, result);
                    // No need to change expResult to test in ringRandomForAltTesting
                    currIQI = new ImaginaryQuadraticInteger(m, n, ringRandomForAltTesting, 2);
                    result = currIQI.toASCIIStringAlt().replace(" ", "");
                    assertEquals(expResult, result);
                }
            }
        }
        /* For integers in rings without "half-integers," we expect 
        toASCIIString() and toASCIIStringAlt() to give the same result. */
        for (int i = 0; i < totalTestIntegers; i++) {
            if (!testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                assertEquals(testIntegers.get(i).toASCIIString(), testIntegers.get(i).toASCIIStringAlt());
            }
        }
    }
    
    /**
     * Test of hashCode method, of class ImaginaryQuadraticInteger. It is 
     * expected that if two ImaginaryQuadraticInteger objects are equal, their 
     * hash codes are equal as well. It is also expected that a + b sqrt(c) and 
     * a + b sqrt(d) will get different hash codes. But it definitely not 
     * expected that hash codes will be unique among all possible 
     * ImaginaryQuadraticInteger objects.
     */
    @Test
    public void testHashCode() {
        System.out.println("hashCode");
        ImaginaryQuadraticInteger temporaryHold;
        int testHash, tempHash;
        int prevHash = 0;
        for (int i = 0; i < totalTestIntegers; i++) {
            testHash = testIntegers.get(i).hashCode();
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                temporaryHold = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, testIntegers.get(i).imagQuadRing, 2);
            } else {
                temporaryHold = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, testIntegers.get(i).imagQuadRing, 1);
            }
            tempHash = temporaryHold.hashCode();
            System.out.println(testIntegers.get(i).toASCIIString() + " hashed to " + testHash);
            System.out.println(temporaryHold.toASCIIString() + " hashed to " + tempHash);
            assertEquals(testHash, tempHash);
            assertFalse(testHash == prevHash);
            prevHash = testHash;
        }
        // Now to test purely real integers register as equal regardless of what imagQuadRing might be
        ImaginaryQuadraticInteger altZeroIQI = new ImaginaryQuadraticInteger(0, 0, testNorms.get(totalTestIntegers - 1).imagQuadRing, 1);
        assertEquals(altZeroIQI, zeroIQI);
        for (int j = 0; j < totalTestIntegers - 1; j++) {
            temporaryHold = new ImaginaryQuadraticInteger(testNormsRealParts.get(j), 0, testNorms.get(totalTestIntegers - 1).imagQuadRing, 1);
            tempHash = temporaryHold.hashCode();
            testHash = testNorms.get(j).hashCode();
            System.out.println(temporaryHold.toString() + " from " + temporaryHold.imagQuadRing.toASCIIString() + " hashed as " + tempHash);
            System.out.println(testNorms.get(j).toString() + " from " + testNorms.get(j).imagQuadRing.toASCIIString() + " hashed as " + testHash);
            assertEquals(tempHash, testHash);
        }
    }
    
    /**
     * Test of equals method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testEquals() {
        System.out.println("equals");
        ImaginaryQuadraticInteger temporaryHold, transitiveHold, kindaDiffZero;
        int normCalc;
        boolean expResult, result;
        for (int i = 0; i < totalTestIntegers; i++) {
            assertTrue(testIntegers.get(i).equals(testIntegers.get(i))); // Reflexive test
            if (testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                temporaryHold = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, testIntegers.get(i).imagQuadRing, 2);
                transitiveHold = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, testIntegers.get(i).imagQuadRing, 2);
                normCalc = (randomRealForHalfInts * randomRealForHalfInts + testIntegers.get(i).imagQuadRing.getAbsNegRad() * randomImagForHalfInts * randomImagForHalfInts)/4;
            } else {
                temporaryHold = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, testIntegers.get(i).imagQuadRing, 1);
                transitiveHold = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, testIntegers.get(i).imagQuadRing, 1);
                normCalc = randomRealPart * randomRealPart + testIntegers.get(i).imagQuadRing.getAbsNegRad() * randomImagPart * randomImagPart;
            }
            assertTrue(testIntegers.get(i).equals(testIntegers.get(i))); // First consistency test
            assertEquals(testIntegers.get(i), temporaryHold);
            assertEquals(temporaryHold, testIntegers.get(i)); // Symmetric test
            assertEquals(temporaryHold, transitiveHold);
            assertEquals(transitiveHold, testIntegers.get(i)); // Transitive test
            assertTrue(testIntegers.get(i).equals(testIntegers.get(i))); // Second consistency test
            // assertFalse(testIntegers.get(i).equals(null)); Null test is apparently unnecessary
        }
        for (int j = 0; j < totalTestIntegers - 1; j++) {
            assertFalse(testIntegers.get(j).equals(testIntegers.get(j + 1)));
            assertFalse(testIntegers.get(j + 1).equals(testIntegers.get(j))); // Symmetric test for not equals
            temporaryHold = new ImaginaryQuadraticInteger(testNormsRealParts.get(j), 0, testNorms.get(j + 1).imagQuadRing, 1);
            assertEquals(testNorms.get(j), temporaryHold);
            kindaDiffZero = new ImaginaryQuadraticInteger(0, 0, testIntegers.get(j + 1).imagQuadRing, 1);
            assertEquals(zeroIQI, kindaDiffZero); // Making sure purely real integers can register as equal
        }
    }
    
    /**
     * Test of equalsInt, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testEqualsInt() {
        System.out.println("equalsInt");
        for (int i = 0; i < totalTestIntegers; i++) {
            assertTrue(testNorms.get(i).equalsInt(testNormsRealParts.get(i)));
            assertFalse(testIntegers.get(i).equalsInt(randomRealPart));
            assertFalse(testIntegers.get(i).equalsInt(randomRealForHalfInts));
        }
        assertTrue(zeroIQI.equalsInt(0));
    }

    /**
     * Test of plus method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testPlus() {
        System.out.println("plus");
        ImaginaryQuadraticRing currRing;
        ImaginaryQuadraticInteger expResult, result, testAddendA, testAddendB;
        int currDenom;
        for (int iterDiscr = -1; iterDiscr > -200; iterDiscr--) {
            if (NumberTheoreticFunctionsCalculator.isSquareFree(iterDiscr)) {
                currRing = new ImaginaryQuadraticRing(iterDiscr);
                if (currRing.hasHalfIntegers()) {
                    currDenom = 2;
                } else {
                    currDenom = 1;
                }
                for (int v = -3; v < 48; v += 2) {
                    for (int w = -3; w < 48; w += 2) {
                        testAddendA = new ImaginaryQuadraticInteger(v, w, currRing, currDenom);
                        for (int x = -3; x < 48; x += 2) {
                            for (int y = -3; y < 48; y += 2) {
                                testAddendB = new ImaginaryQuadraticInteger(x, y, currRing, currDenom);
                                expResult = new ImaginaryQuadraticInteger(v + x, w + y, currRing, currDenom);
                                try {
                                    result = testAddendA.plus(testAddendB);
                                } catch (AlgebraicDegreeOverflowException adoe) {
                                    result = zeroIQI; // This is just to avoid "variable result might not have been initialized" error
                                    fail("Adding two integers from the same ring should not have triggered AlgebraicDegreeOverflowException \"" + adoe.getMessage() + "\"");
                                }
                                assertEquals(expResult, result);
                            }
                            // Now to test plus(int)
                            if (currRing.hasHalfIntegers()) {
                                expResult = new ImaginaryQuadraticInteger(v + 2 * x, w, currRing, 2);
                            } else {
                                expResult = new ImaginaryQuadraticInteger(v + x, w, currRing, 1);
                            }
                            result = testAddendA.plus(x);
                            assertEquals(expResult, result);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < totalTestIntegers; i++) {
            // Testing that adding additive inverses give 0 each time
            try {
                result = testIntegers.get(i).plus(testAdditiveInverses.get(i));
            } catch (AlgebraicDegreeOverflowException adoe) {
                result = zeroIQI; // Again, this is just to avoid "variable result might not have been initialized" error
                fail("Adding test integer to its additive inverse should not have triggered AlgebraicDegreeOverflowException \"" + adoe.getMessage());
            }
            assertEquals(zeroIQI, result);
            // Now testing that adding 0 does not change the number
            result = testIntegers.get(i).plus(0);
            assertEquals(testIntegers.get(i), result);
        }
        /* And now to test that adding algebraic integers from two different 
           quadratic integer rings triggers AlgebraicDegreeOverflowException */
        for (int j = 0; j < totalTestIntegers - 1; j++) {
            try {
                result = testIntegers.get(j).plus(testIntegers.get(j + 1));
                fail("Adding " + testIntegers.get(j).toASCIIString() + " to " + testIntegers.get(j + 1).toASCIIString() + " should not have resulted in " + result.toASCIIString() + " without triggering AlgebraicDegreeOverflowException.");
            } catch (AlgebraicDegreeOverflowException adoe) {
                System.out.println("Adding " + testIntegers.get(j).toASCIIString() + " to " + testIntegers.get(j + 1).toASCIIString() + " correctly triggered AlgebraicDegreeOverflowException (algebraic degree " + adoe.getNecessaryAlgebraicDegree() + " needed).");
            }
        }
    }

    /**
     * Test of minus method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testMinus() {
        System.out.println("minus");
        ImaginaryQuadraticRing currRing;
        ImaginaryQuadraticInteger expResult, result, testMinuend, testSubtrahend;
        int currDenom;
        for (int iterDiscr = -1; iterDiscr > -200; iterDiscr--) {
            if (NumberTheoreticFunctionsCalculator.isSquareFree(iterDiscr)) {
                currRing = new ImaginaryQuadraticRing(iterDiscr);
                if (currRing.hasHalfIntegers()) {
                    currDenom = 2;
                } else {
                    currDenom = 1;
                }
                for (int v = -3; v < 48; v += 2) {
                    for (int w = -3; w < 48; w += 2) {
                        testMinuend = new ImaginaryQuadraticInteger(v, w, currRing, currDenom);
                        for (int x = -3; x < 48; x += 2) {
                            for (int y = -3; y < 48; y += 2) {
                                testSubtrahend = new ImaginaryQuadraticInteger(x, y, currRing, currDenom);
                                expResult = new ImaginaryQuadraticInteger(v - x, w - y, currRing, currDenom);
                                try {
                                    result = testMinuend.minus(testSubtrahend);
                                } catch (AlgebraicDegreeOverflowException adoe) {
                                    result = zeroIQI; // This is just to avoid "variable result might not have been initialized" error
                                    fail("Adding two integers from the same ring should not have triggered AlgebraicDegreeOverflowException \"" + adoe.getMessage() + "\"");
                                }
                                assertEquals(expResult, result);
                            }
                            // Now to test minus(int)
                            if (currRing.hasHalfIntegers()) {
                                expResult = new ImaginaryQuadraticInteger(v - 2 * x, w, currRing, 2);
                            } else {
                                expResult = new ImaginaryQuadraticInteger(v - x, w, currRing, 1);
                            }
                            result = testMinuend.minus(x);
                            assertEquals(expResult, result);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < totalTestIntegers; i++) {
            // Testing that subtracting itself gives 0 each time
            expResult = new ImaginaryQuadraticInteger(0, 0, testIntegers.get(i).imagQuadRing, 1);
            try {
                result = testIntegers.get(i).minus(testIntegers.get(i));
            } catch (AlgebraicDegreeOverflowException adoe) {
                result = zeroIQI; // Again, this is just to avoid "variable result might not have been initialized" error
                fail("Subtracting test integer from itself should not have triggered AlgebraicDegreeOverflowException \"" + adoe.getMessage());
            }
            assertEquals(expResult, result);
            // Now testing that subtracting 0 does not change the number
            result = testIntegers.get(i).minus(0);
            assertEquals(testIntegers.get(i), result);
        }
        // And now to test that subtracting algebraic integers from two different quadratic integer rings triggers AlgebraicDegreeOverflowException
        for (int j = 0; j < totalTestIntegers - 1; j++) {
            try {
                result = testIntegers.get(j).minus(testIntegers.get(j + 1));
                fail("Subtracting " + testIntegers.get(j + 1).toASCIIString() + " to " + testIntegers.get(j).toASCIIString() + " should not have resulted in " + result.toASCIIString() + " without triggering AlgebraicDegreeOverflowException.");
            } catch (AlgebraicDegreeOverflowException adoe) {
                System.out.println("Subtracting " + testIntegers.get(j + 1).toASCIIString() + " from " + testIntegers.get(j).toASCIIString() + " correctly triggered AlgebraicDegreeOverflowException (algebraic degree " + adoe.getNecessaryAlgebraicDegree() + " needed).");
            }
        }
    }

    /**
     * Test of times method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testTimes() {
        System.out.println("times");
        ImaginaryQuadraticRing currRing;
        ImaginaryQuadraticInteger expResult, result, testMultiplicandA, testMultiplicandB;
        int currDenom;
        for (int iterDiscr = -1; iterDiscr > -200; iterDiscr--) {
            if (NumberTheoreticFunctionsCalculator.isSquareFree(iterDiscr)) {
                currRing = new ImaginaryQuadraticRing(iterDiscr);
                if (currRing.hasHalfIntegers()) {
                    currDenom = 2;
                } else {
                    currDenom = 1;
                }
                for (int v = -3; v < 48; v += 2) {
                    for (int w = -3; w < 48; w += 2) {
                        testMultiplicandA = new ImaginaryQuadraticInteger(v, w, currRing, currDenom);
                        for (int x = -3; x < 48; x += 2) {
                            for (int y = -3; y < 48; y += 2) {
                                testMultiplicandB = new ImaginaryQuadraticInteger(x, y, currRing, currDenom);
                                if (currRing.hasHalfIntegers()) {
                                    expResult = new ImaginaryQuadraticInteger((v * x + w * y * iterDiscr)/2, (v * y + w * x)/2, currRing, currDenom);
                                } else {
                                    expResult = new ImaginaryQuadraticInteger(v * x + w * y * iterDiscr, v * y + w * x, currRing, currDenom);
                                }
                                try {
                                    result = testMultiplicandA.times(testMultiplicandB);
                                } catch (AlgebraicDegreeOverflowException adoe) {
                                    result = zeroIQI; // This is just to avoid "variable result might not have been initialized" error
                                    fail("Multiplying two integers from the same ring should not have triggered AlgebraicDegreeOverflowException \"" + adoe.getMessage() + "\"");
                                }
                                assertEquals(expResult, result);
                            }
                            // Now to test times(int)
                            expResult = new ImaginaryQuadraticInteger(v * x, w * x, currRing, currDenom);
                            result = testMultiplicandA.times(x);
                            assertEquals(expResult, result);
                        }
                    }
                }
            }
        }
        // Complex integer times its conjugate should match its norm
        for (int i = 0; i < totalTestIntegers; i++) {
            try {
                result = testIntegers.get(i).times(testConjugates.get(i));
            } catch (AlgebraicDegreeOverflowException adoe) {
                result = zeroIQI; // This is just to avoid "variable result might not have been initialized" error
                fail("Multiplying an integer by its conjugate should not have triggered AlgebraicDegreeOverflowException \"" + adoe.getMessage());
            }
            assertEquals(testNorms.get(i), result);
        }
        // And now to test that multiplying algebraic integers from two different quadratic integer rings triggers AlgebraicDegreeOverflowException
        for (int j = 0; j < totalTestIntegers - 1; j++) {
            try {
                result = testIntegers.get(j).times(testIntegers.get(j + 1));
                fail("Multiplying " + testIntegers.get(j).toASCIIString() + " by " + testIntegers.get(j + 1).toASCIIString() + " should not have resulted in " + result.toASCIIString() + " without triggering AlgebraicDegreeOverflowException.");
            } catch (AlgebraicDegreeOverflowException adoe) {
                System.out.println("Multiplying " + testIntegers.get(j).toASCIIString() + " by " + testIntegers.get(j + 1).toASCIIString() + " correctly triggered AlgebraicDegreeOverflowException (algebraic degree " + adoe.getNecessaryAlgebraicDegree() + " needed).");
            }
        }
    }

    /**
     * Test of divides method, of class ImaginaryQuadraticInteger. This test 
     * multiplies several algebraic integers in the rings Z[i] to Z[sqrt(-199)], 
     * then divides to get back the first number. So if the test of the times 
     * method fails, the result of this test is meaningless. In regards to 
     * division by zero, this test will pass if either IllegalArgumentException 
     * or ArithmeticException is thrown. Any other exception will fail the test.
     */
    @Test
    public void testDivides() {
        System.out.println("divides");
        ImaginaryQuadraticRing currRing;
        ImaginaryQuadraticInteger expResult, result, testQuotient, testDivisor, testDividend;
        int currDenom;
        for (int iterDiscr = -1; iterDiscr > -200; iterDiscr--) {
            if (NumberTheoreticFunctionsCalculator.isSquareFree(iterDiscr)) {
                currRing = new ImaginaryQuadraticRing(iterDiscr);
                if (currRing.hasHalfIntegers()) {
                    currDenom = 2;
                } else {
                    currDenom = 1;
                }
                for (int v = -3; v < 48; v += 2) {
                    for (int w = 3; w < 54; w += 2) {
                        testQuotient = new ImaginaryQuadraticInteger(v, w, currRing, currDenom);
                        for (int x = -3; x < 48; x += 2) {
                            for (int y = 3; y < 54; y += 2) {
                                testDivisor = new ImaginaryQuadraticInteger(x, y, currRing, currDenom);
                                try {
                                    testDividend = testQuotient.times(testDivisor);
                                } catch (AlgebraicDegreeOverflowException adoe) {
                                    testDividend = zeroIQI; // This is just to avoid "variable result might not have been initialized" error
                                    fail("Check results of times() test for incorrect triggering of AlgebraicDegreeOverflowException \"" + adoe.getMessage() + "\"");
                                }
                                try {
                                    result = testDividend.divides(testDivisor);
                                } catch (AlgebraicDegreeOverflowException adoe) {
                                    result = zeroIQI; // Avoiding "variable result might not have been initialized" error
                                    fail("Dividing one integer by another from the same ring should not have triggered AlgebraicDegreeOverflowException \"" + adoe.getMessage() + "\"");
                                } catch (NotDivisibleException nde) {
                                    result = zeroIQI; // Avoiding "variable result might not have been initialized" error
                                    fail("Dividing " + testDividend.toASCIIString() + " by " + testDivisor.toASCIIString() + " should not have triggered NotDivisibleException.");
                                }
                                assertEquals(testQuotient, result);
                            }
                            // Now to test divides(int)
                            testDividend = new ImaginaryQuadraticInteger(v * x, w * x, currRing, currDenom);
                            expResult = new ImaginaryQuadraticInteger(v, w, currRing, currDenom);
                            try {
                                result = testDividend.divides(x);
                            } catch (NotDivisibleException nde) {
                                result = zeroIQI; // Avoiding "variable result might not have been initialized" error
                                fail("Dividing " + testDividend.toASCIIString() + " by " + x + " should not have tirggered NotDivisibleException.");
                            }
                            assertEquals(expResult, result);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < totalTestIntegers; i++) {
            try {
                result = testNorms.get(i).divides(testConjugates.get(i));
            } catch (AlgebraicDegreeOverflowException adoe) {
                result = zeroIQI;
                fail("AlgebraicDegreeOverflowException should not have occurred.");
            } catch (NotDivisibleException nde) {
                result = zeroIQI;
                System.out.println(testNorms.get(i).toASCIIString() + " divided by " + testConjugates.get(i).toASCIIString() + " is (" + nde.getResReFractNumer() + " + " + nde.getResImFractNumer() + "sqrt(" + nde.getResFractNegRad() + "))/" + nde.getResFractDenom());
                fail("NotDivisibleException should not have occurred in dividing a norm by a conjugate.");
            }
            System.out.println(testNorms.get(i).toASCIIString() + " divided by " + testConjugates.get(i).toASCIIString() + " is " + result.toASCIIString());
            assertEquals(testIntegers.get(i), result);
            try {
                result = testNorms.get(i).divides(testIntegers.get(i));
            } catch (AlgebraicDegreeOverflowException adoe) {
                result = zeroIQI;
                fail("AlgebraicDegreeOverflowException should not have occurred.");
            } catch (NotDivisibleException nde) {
                result = zeroIQI;
                System.out.println(testNorms.get(i).toASCIIString() + " divided by " + testIntegers.get(i).toASCIIString() + " is (" + nde.getResReFractNumer() + " + " + nde.getResImFractNumer() + "sqrt(" + nde.getResFractNegRad() + "))/" + nde.getResFractDenom());
                fail("NotDivisibleException should not have occurred in dividing a norm by a conjugate.");
            }
            System.out.println(testNorms.get(i).toASCIIString() + " divided by " + testIntegers.get(i).toASCIIString() + " is " + result.toASCIIString());
            assertEquals(testConjugates.get(i), result);
            /* Last but not least, check to make sure division by zero causes a 
               suitable exception. */
            try {
                testIntegers.get(i).divides(zeroIQI);
            } catch (AlgebraicDegreeOverflowException adoe) {
                fail("AlgebraicDegreeOverflowException is the wrong exception to throw for division by 0.");
            } catch (NotDivisibleException nde) {
                fail("NotDivisibleException is the wrong exception to throw for division by 0.");
            } catch (IllegalArgumentException iae) {
                System.out.println("IllegalArgumentException correctly triggered upon attempt to divide by 0 + 0i.");
            } catch (ArithmeticException ae) {
                System.out.println("ArithmeticException correctly triggered upon attempt to divide by 0 + 0i.");
            } catch (Exception e) {
                System.out.println("Wrong exception thrown for attempt to divide by 0 + 0i. " + e.getMessage());
            }
            try {
                testIntegers.get(i).divides(0);
            } catch (NotDivisibleException nde) {
                fail("NotDivisibleException is the wrong exception to throw for division by 0.");
            } catch (IllegalArgumentException iae) {
                System.out.println("IllegalArgumentException correctly triggered upon attempt to divide by 0.");
            } catch (ArithmeticException ae) {
                System.out.println("ArithmeticException correctly triggered upon attempt to divide by 0.");
            } catch (Exception e) {
                System.out.println("Wrong exception thrown for attempt to divide by 0. " + e.getMessage());
            }
        }
    }

    /**
     * Test of ImaginaryQuadraticInteger class constructor. The main thing we're 
     * testing here is that an invalid argument triggers an 
     * IllegalArgumentException.
     */
    @Test
    public void testConstructor() {
        System.out.println("ImaginaryQuadraticInteger (constructor)");
        ImaginaryQuadraticInteger quadrInt = new ImaginaryQuadraticInteger(1, 3, ringZi2, 1); // This should work fine
        System.out.println("Created " + quadrInt.toASCIIString() + " without problem.");
        quadrInt = new ImaginaryQuadraticInteger(7, 5, ringEisenstein, 2); // This should also work fine
        System.out.println("Created " + quadrInt.toASCIIString() + " without problem.");
        quadrInt = new ImaginaryQuadraticInteger(6, 4, ringGaussian, -2); // This should also work, right?
        System.out.println("Created " + quadrInt.toASCIIString() + " without problem.");
        // Test 3-parameter constructor
        quadrInt = new ImaginaryQuadraticInteger(5, 3, ringOQi7);
        System.out.println("Created " + quadrInt.toASCIIString() + " without problem.");
        ImaginaryQuadraticInteger comparisonInt = new ImaginaryQuadraticInteger(5, 3, ringOQi7, 1);
        assertEquals(quadrInt, comparisonInt); // It should be the case that 5 + 3sqrt(-7) = 5 + 3sqrt(-7)
        comparisonInt = new ImaginaryQuadraticInteger(5, 3, ringOQi7, 2);
        assertNotEquals(quadrInt, comparisonInt); // 5 + 3sqrt(-7) = 5/2 + 3sqrt(-7)/2 would be wrong
        try {
            quadrInt = new ImaginaryQuadraticInteger(3, 1, ringRandom, 4);
            System.out.println("Somehow created " + quadrInt.toASCIIString() + " without problem.");
            fail("Attempt to create ImaginaryQuadraticInteger with denominator 4 should have caused an IllegalArgumentException.");
        } catch (IllegalArgumentException iae) {
            System.out.println("Attempt to use denominator 4 correctly triggered IllegalArgumentException \"" + iae.getMessage() + "\"");
        }
        try {
            quadrInt = new ImaginaryQuadraticInteger(3, 2, ringEisenstein, 2);
            System.out.println("Somehow created " + quadrInt.toASCIIString() + " without problem.");
            fail("Attempt to create ImaginaryQuadraticInteger with mismatched parities of a and b should have caused an IllegalArgumentException.");
        } catch (IllegalArgumentException iae) {
            System.out.println("Attempt to use mismatched parities correctly triggered IllegalArgumentException \"" + iae.getMessage() + "\"");
        }
    }    
    
}