/*
 * Copyright (C) 2017 Alonso del Arte
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package imaginaryquadraticinteger;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Alonso del Arte, from template generated by NetBeans IDE
 */
public class ImaginaryQuadraticRingTest {
    
    private static ImaginaryQuadraticRing ringGaussian;
    private static ImaginaryQuadraticRing ringZi2;
    private static ImaginaryQuadraticRing ringEisenstein;
    private static ImaginaryQuadraticRing ringOQi7;
    private static ImaginaryQuadraticRing ringRandom;
    
    private static int randomDiscr;
    private static boolean ringRandomd1mod4;
    
    public ImaginaryQuadraticRingTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
        randomDiscr = NumberTheoreticFunctionsCalculator.randomNegativeSquarefreeNumber(RingWindowDisplay.MINIMUM_RING_D);
        if (randomDiscr > -5) {
            randomDiscr = -5; // This is just in case we get -3 or -1, which we are already testing for and which require special treatment in some of the tests.
        }
        ringRandomd1mod4 = (randomDiscr % 4 == -3);
        ringGaussian = new ImaginaryQuadraticRing(-1);
        ringZi2 = new ImaginaryQuadraticRing(-2);
        ringEisenstein = new ImaginaryQuadraticRing(-3);
        ringOQi7 = new ImaginaryQuadraticRing(-7);
        ringRandom = new ImaginaryQuadraticRing(randomDiscr);
        System.out.println(ringRandom.toFilenameString() + " has been randomly chosen for testing purposes.");
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }
    
    /**
     * Test of hasHalfIntegers method, of class ImaginaryQuadraticRing.
     */
    @Test
    public void testHasHalfIntegers() {
        assertFalse(ringGaussian.hasHalfIntegers());
        assertFalse(ringZi2.hasHalfIntegers());
        assertTrue(ringEisenstein.hasHalfIntegers());
        assertTrue(ringOQi7.hasHalfIntegers());
        assertEquals(ringRandom.hasHalfIntegers(), ringRandomd1mod4);
    }

    /**
     * Test of preferBlackboardBold method, of class ImaginaryQuadraticRing.
     * Without arguments, preferBlackboardBold is the getter method.
     * With arguments, preferBlackboardBold is the setter method.
     */
    @Test
    public void testPreferBlackboardBold() {
        System.out.println("preferBlackboardBold, no arguments");
        ImaginaryQuadraticRing.preferBlackboardBold(true);
        assertTrue(ImaginaryQuadraticRing.preferBlackboardBold());
        ImaginaryQuadraticRing.preferBlackboardBold(false);
        assertFalse(ImaginaryQuadraticRing.preferBlackboardBold());
        System.out.println("preferBlackboardBold, with boolean argument");
        ImaginaryQuadraticRing.preferBlackboardBold(true);
        assertTrue(ImaginaryQuadraticRing.preferBlackboardBold());
        ImaginaryQuadraticRing.preferBlackboardBold(false);
        assertFalse(ImaginaryQuadraticRing.preferBlackboardBold());
    }

    /**
     * Test of toString method, of class ImaginaryQuadraticRing.
     */
    @Test
    public void testToString() {
        System.out.println("toString");
        String expResult = "Z[i]";
        String result = ringGaussian.toString();
        assertEquals(expResult, result);
        expResult = "Z[\u221A-2]";
        result = ringZi2.toString();
        assertEquals(expResult, result);
        expResult = "Z[\u03C9]";
        result = ringEisenstein.toString();
        assertEquals(expResult, result);
        expResult = "O_(Q(\u221A-7))";
        result = ringOQi7.toString();
        assertEquals(expResult, result);
        if (ringRandomd1mod4) {
            expResult = "O_(Q(\u221A" + randomDiscr + "))";
        } else {
            expResult = "Z[\u221A" + randomDiscr + "]";
        }
        result = ringRandom.toString();
        assertEquals(expResult, result);
    }

    /**
     * Test of toTeXString method, of class ImaginaryQuadraticRing.
     */
    @Test
    public void testToTeXString() {
        System.out.println("toTeXString");
        ImaginaryQuadraticRing.preferBlackboardBold(true);
        String expResult = "\\mathbb Z[i]";
        String result = ringGaussian.toTeXString();
        assertEquals(expResult, result);
        expResult = "\\mathbb Z[\\sqrt{-2}]";
        result = ringZi2.toTeXString();
        assertEquals(expResult, result);
        expResult = "\\mathbb Z[\\omega]";
        result = ringEisenstein.toTeXString();
        assertEquals(expResult, result);
        expResult = "\\mathcal O_{\\mathbb Q(\\sqrt{-7})}";
        result = ringOQi7.toTeXString();
        assertEquals(expResult, result);
        if (ringRandomd1mod4) {
            expResult = "\\mathcal O_{\\mathbb Q(\\sqrt{" + randomDiscr + "})}";
        } else {
            expResult = "\\mathbb Z[\\sqrt{" + randomDiscr + "}]";
        }
        result = ringRandom.toTeXString();
        assertEquals(expResult, result);
        ImaginaryQuadraticRing.preferBlackboardBold(false);
        expResult = "\\textbf Z[i]";
        result = ringGaussian.toTeXString();
        assertEquals(expResult, result);
        expResult = "\\textbf Z[\\sqrt{-2}]";
        result = ringZi2.toTeXString();
        assertEquals(expResult, result);
        expResult = "\\textbf Z[\\omega]";
        result = ringEisenstein.toTeXString();
        assertEquals(expResult, result);
        expResult = "\\mathcal O_{\\textbf Q(\\sqrt{-7})}";
        result = ringOQi7.toTeXString();
        assertEquals(expResult, result);
        if (ringRandomd1mod4) {
            expResult = "\\mathcal O_{\\textbf Q(\\sqrt{" + randomDiscr + "})}";
        } else {
            expResult = "\\textbf Z[\\sqrt{" + randomDiscr + "}]";
        }
        result = ringRandom.toTeXString();
        assertEquals(expResult, result);
    }

    /**
     * Test of toHTMLString method, of class ImaginaryQuadraticRing.
     */
    @Test
    public void testToHTMLString() {
        System.out.println("toHTMLString");
        ImaginaryQuadraticRing.preferBlackboardBold(true);
        String expResult = "\u2124[<i>i</i>]";
        String result = ringGaussian.toHTMLString();
        assertEquals(expResult, result);
        expResult = "\u2124[&radic;-2]";
        result = ringZi2.toHTMLString();
        assertEquals(expResult, result);
        expResult = "\u2124[\u03C9]";
        result = ringEisenstein.toHTMLString();
        assertEquals(expResult, result);
        expResult = "<i>O</i><sub>\u211A(&radic;(-7)</sub>";
        result = ringOQi7.toHTMLString();
        assertEquals(expResult, result);
        if (ringRandomd1mod4) {
            expResult = "<i>O</i><sub>\u211A(&radic;(" + randomDiscr + ")</sub>";
        } else {
            expResult = "\u2124[&radic;" + randomDiscr + "]";
        }
        result = ringRandom.toHTMLString();
        assertEquals(expResult, result);
        ImaginaryQuadraticRing.preferBlackboardBold(false);
        expResult = "<b>Z</b>[<i>i</i>]";
        result = ringGaussian.toHTMLString();
        assertEquals(expResult, result);
        expResult = "<b>Z</b>[&radic;-2]";
        result = ringZi2.toHTMLString();
        assertEquals(expResult, result);
        expResult = "<b>Z</b>[\u03C9]";
        result = ringEisenstein.toHTMLString();
        assertEquals(expResult, result);
        expResult = "<i>O</i><sub><b>Q</b>(&radic;(-7)</sub>";
        result = ringOQi7.toHTMLString();
        assertEquals(expResult, result);
        if (ringRandomd1mod4) {
            expResult = "<i>O</i><sub><b>Q</b>(&radic;(" + randomDiscr + ")</sub>";
        } else {
            expResult = "<b>Z</b>[&radic;" + randomDiscr + "]";
        }
        result = ringRandom.toHTMLString();
        assertEquals(expResult, result);
    }

    /**
     * Test of toFilenameString method, of class ImaginaryQuadraticRing.
     */
    @Test
    public void testToFilenameString() {
        System.out.println("toFilenameString");
        // Preference for blackboard bold is irrelevant for this particular test.
        String expResult = "ZI";
        String result = ringGaussian.toFilenameString();
        assertEquals(expResult, result);
        expResult = "ZI2";
        result = ringZi2.toFilenameString();
        assertEquals(expResult, result);
        expResult = "ZW";
        result = ringEisenstein.toFilenameString();
        assertEquals(expResult, result);
        expResult = "OQI7";
        result = ringOQi7.toFilenameString();
        assertEquals(expResult, result);
        if (ringRandomd1mod4) {
            expResult = "OQI" + (-1 * randomDiscr);
        } else {
            expResult = "ZI" + (-1 * randomDiscr);
        }
        result = ringRandom.toFilenameString();
        assertEquals(expResult, result);
    }
    
    /**
     * Test of ImaginaryQuadraticRing class constructor.
     */
    @Test
    public void testConstructor() {
        System.out.println("ImaginaryQuadraticRing (constructor)");
        ImaginaryQuadraticRing ringZi10 = new ImaginaryQuadraticRing(-10); // This should work fine
        System.out.println("Created " + ringZi10.toFilenameString() + " without problem.");
        ImaginaryQuadraticRing ringOQi11 = new ImaginaryQuadraticRing(-11); // This should also work fine
        System.out.println("Created " + ringOQi11.toFilenameString() + " without problem.");
        try {
            ImaginaryQuadraticRing ringZi12 = new ImaginaryQuadraticRing(-12);
            System.out.println("Somehow created " + ringZi12.toFilenameString() + " without problem.");
            fail("Attempt to use -12 should have caused an IllegalArgumentException.");
        } catch (IllegalArgumentException iae) {
            System.out.println("Attempt to use -12 correctly triggered IllegalArgumentException " + iae.getMessage());
        }
    }
    
}
