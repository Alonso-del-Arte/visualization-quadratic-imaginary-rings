/*
 * Copyright (C) 2017 AL
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package imaginaryquadraticinteger;

import java.util.List;
import java.util.ArrayList;
import java.util.Random;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Alonso del Arte, from template generated by NetBeans IDE
 */
public class ImaginaryQuadraticIntegerTest {

    private static ImaginaryQuadraticRing ringGaussian;
    private static ImaginaryQuadraticRing ringZi2;
    private static ImaginaryQuadraticRing ringEisenstein;
    private static ImaginaryQuadraticRing ringOQi7;
    private static ImaginaryQuadraticRing ringRandom;
    
    private static List<ImaginaryQuadraticInteger> testIntegers, testAdditiveInverses, testConjugates, testNorms;
    private static ImaginaryQuadraticInteger zeroIQI;
    
    private static int randomDiscr, randomRealPart, randomImagPart, randomRealForHalfInts, randomImagForHalfInts, totalTestIntegersSize;
    private static boolean ringRandomd1mod4;
    
    public ImaginaryQuadraticIntegerTest() {
    }
    
    /**
     * Sets up the static variables that will be used for the tests.
     */
    @BeforeClass
    public static void setUpClass() {
        randomDiscr = NumberTheoreticFunctionsCalculator.randomNegativeSquarefreeNumber(RingWindowDisplay.MINIMUM_RING_D);
        if (randomDiscr > -5) {
            randomDiscr = -5; // This is just in case we get -3 or -1, which we are already testing for and which require special treatment in some of the tests.
        }
        ringRandomd1mod4 = (randomDiscr % 4 == -3);
        ringGaussian = new ImaginaryQuadraticRing(-1);
        ringZi2 = new ImaginaryQuadraticRing(-2);
        ringEisenstein = new ImaginaryQuadraticRing(-3);
        ringOQi7 = new ImaginaryQuadraticRing(-7);
        ringRandom = new ImaginaryQuadraticRing(randomDiscr);
        System.out.println(ringRandom.toFilenameString() + " has been randomly chosen for testing purposes.");
        Random ranNumGen = new Random();
        randomRealPart = ranNumGen.nextInt(1024) - 512;
        randomImagPart = ranNumGen.nextInt(1024) - 512;
        if (randomImagPart == 0) {
            randomImagPart = 1; // We want to make sure none of these random imaginary quadratic integers are purely real.
        }
        randomRealForHalfInts = 2 * randomRealPart + 1;
        randomImagForHalfInts = 2 * randomImagPart + 1;
        zeroIQI = new ImaginaryQuadraticInteger(0, 0, ringGaussian, 1);
        testIntegers = new ArrayList<>();
        testAdditiveInverses = new ArrayList<>();
        testConjugates = new ArrayList<>();
        testNorms = new ArrayList<>();
        int currNorm;
        ImaginaryQuadraticInteger currIQI = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, ringGaussian, 1);
        testIntegers.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(-randomRealPart, -randomImagPart, ringGaussian, 1);
        testAdditiveInverses.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealPart, -randomImagPart, ringGaussian, 1);
        testConjugates.add(currIQI);
        currNorm = randomRealPart * randomRealPart + randomImagPart * randomImagPart;
        currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringGaussian, 1);
        testNorms.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, ringZi2, 1);
        testIntegers.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(-randomRealPart, -randomImagPart, ringZi2, 1);
        testAdditiveInverses.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealPart, -randomImagPart, ringZi2, 1);
        testConjugates.add(currIQI);
        currNorm = randomRealPart * randomRealPart + 2 * randomImagPart * randomImagPart;
        currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringZi2, 1);
        testNorms.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, ringEisenstein, 1);
        testIntegers.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(-randomRealForHalfInts, -randomImagForHalfInts, ringEisenstein, 1);
        testAdditiveInverses.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, -randomImagForHalfInts, ringEisenstein, 1);
        testConjugates.add(currIQI);
        currNorm = (randomRealForHalfInts * randomRealForHalfInts + 3 * randomImagForHalfInts * randomImagForHalfInts)/4;
        currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringEisenstein, 1);
        testNorms.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, ringOQi7, 1);
        testIntegers.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(-randomRealForHalfInts, -randomImagForHalfInts, ringOQi7, 1);
        testAdditiveInverses.add(currIQI);
        currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, -randomImagForHalfInts, ringOQi7, 1);
        testConjugates.add(currIQI);
        currNorm = (randomRealForHalfInts * randomRealForHalfInts + 7 * randomImagForHalfInts * randomImagForHalfInts)/4;
        currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringOQi7, 1);
        testNorms.add(currIQI);
        if (ringRandomd1mod4) {
            currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, randomImagForHalfInts, ringRandom, 1);
            testIntegers.add(currIQI);
            currIQI = new ImaginaryQuadraticInteger(-randomRealForHalfInts, -randomImagForHalfInts, ringRandom, 1);
            testAdditiveInverses.add(currIQI);
            currIQI = new ImaginaryQuadraticInteger(randomRealForHalfInts, -randomImagForHalfInts, ringRandom, 1);
            testConjugates.add(currIQI);
            currNorm = (randomRealForHalfInts * randomRealForHalfInts + randomDiscr * randomImagForHalfInts * randomImagForHalfInts)/4;
            currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringRandom, 1);
            testNorms.add(currIQI);
        } else {
            currIQI = new ImaginaryQuadraticInteger(randomRealPart, randomImagPart, ringRandom, 1);
            testIntegers.add(currIQI);
            currIQI = new ImaginaryQuadraticInteger(-randomRealPart, -randomImagPart, ringRandom, 1);
            testAdditiveInverses.add(currIQI);
            currIQI = new ImaginaryQuadraticInteger(randomRealPart, -randomImagPart, ringRandom, 1);
            testConjugates.add(currIQI);
            currNorm = randomRealPart * randomRealPart + randomDiscr * randomImagPart * randomImagPart;
            currIQI = new ImaginaryQuadraticInteger(currNorm, 0, ringRandom, 1);
            testNorms.add(currIQI);
        }
        totalTestIntegersSize = totalTestIntegersSize;
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of algebraicDegree method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testAlgebraicDegree() {
        System.out.println("algebraicDegree");
        ImaginaryQuadraticRing instanceRing = new ImaginaryQuadraticRing(-2);
        ImaginaryQuadraticInteger instance = new ImaginaryQuadraticInteger(1, 1, instanceRing, 1);
        int expResult = 2; // Quadratic integers with nonzero imaginary part should have algebraic degree 2
        int result;
        for (int i = 0; i < totalTestIntegersSize; i++) {
            result = testIntegers.get(i).algebraicDegree();
            assertEquals(expResult, result);
            result = testAdditiveInverses.get(i).algebraicDegree();
            assertEquals(expResult, result);
            result = testConjugates.get(i).algebraicDegree();
            assertEquals(expResult, result);
        }
        expResult = 1; // Purely real nonzero integers should have algebraic degree 1
        for (int j = 0; j < testNorms.size(); j++) {
            result = testNorms.get(j).algebraicDegree();
            assertEquals(expResult, result);
        }
        expResult = 0; // And last but not least, 0 should have algebraic degree 0
        result = zeroIQI.algebraicDegree();
        assertEquals(expResult, result);
    }

    /**
     * Test of trace method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testTrace() {
        System.out.println("trace");
        int expResult = 2 * randomRealPart;
        int result; // First we're going to test the integers in rings without "half-integers"
        for (int i = 0; i < totalTestIntegersSize; i++) {
            if (!testIntegers.get(i).imagQuadRing.hasHalfIntegers()) {
                result = testIntegers.get(i).trace();
                assertEquals(expResult, result);
            }
        }
        expResult = randomRealForHalfInts; // Now to test the "half-integers"
        for (int j = 0; j < totalTestIntegersSize; j++) {
            if (testIntegers.get(j).imagQuadRing.hasHalfIntegers()) {
                result = testIntegers.get(j).trace();
                assertEquals(expResult, result);
            }
        }
    }
    
    // Still working on the tests, so for now 2 tests pass, 13 fail

    /**
     * Test of norm method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testNorm() {
        System.out.println("norm");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of minPolynomial method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testMinPolynomial() {
        System.out.println("minPolynomial");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of minPolynomialString method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testMinPolynomialString() {
        System.out.println("minPolynomialString");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of getRealPartMult method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testGetRealPartMult() {
        System.out.println("getRealPartMult");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of getImagPartwRadMult method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testGetImagPartwRadMult() {
        System.out.println("getImagPartwRadMult");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of getTwiceRealPartMult method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testGetTwiceRealPartMult() {
        System.out.println("getTwiceRealPartMult");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of getTwiceImagPartMult method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testGetTwiceImagPartMult() {
        System.out.println("getTwiceImagPartMult");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of toString method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testToString() {
        System.out.println("toString");
        for (int i = 0; i < totalTestIntegersSize; i++) {
            System.out.println(testIntegers.get(i).toString());
            // TODO write assertEquals()
        }
        // TODO review the generated test code and remove the default call to fail.
        fail("Started to write the test but haven't finished it yet, so perfunctory fail.");
    }

    /**
     * Test of toStringAlt method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testToStringAlt() {
        System.out.println("toStringAlt");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of plus method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testPlus() throws Exception {
        System.out.println("plus");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of minus method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testMinus() throws Exception {
        System.out.println("minus");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of times method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testTimes() throws Exception {
        System.out.println("times");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }

    /**
     * Test of divides method, of class ImaginaryQuadraticInteger.
     */
    @Test
    public void testDivides() throws Exception {
        System.out.println("divides");
        // For this particular test class, the code automatically generated by the IDE had an annoyingly high number of "dereferencing null pointer" warnings.
        // So for the time being, my own placeholders for the tests.
        fail("Haven't written the test yet, so perfunctory fail.");
    }
    
}